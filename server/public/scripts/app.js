"use strict";function initialiseState(){return"PushManager"in window?"showNotification"in ServiceWorkerRegistration.prototype?"denied"===Notification.permission?void console.log("The user has blocked notifications."):void navigator.serviceWorker.ready.then(function(n){n.pushManager.getSubscription().then(function(n){return n?(sendSubscriptionToServer(n),pushButton.textContent="Disable Push Messages",isPushEnabled=!0,void 0):(pushButton.textContent="Enable Push Messages",void(pushButton.disabled=!1))})["catch"](function(n){console.log("Error during getSubscription()",n)})}):void console.log("Notifications aren't supported."):void console.log("Push messaging isn't supported.")}function subscribe(){pushButton.disabled=!0,navigator.serviceWorker.ready.then(function(n){n.pushManager.subscribe({userVisibleOnly:!0}).then(function(n){return isPushEnabled=!0,pushButton.textContent="Disable Push Messages",pushButton.disabled=!1,sendSubscriptionToServer(n)})["catch"](function(n){"denied"===Notification.permission?(console.log("Permission for Notifications was denied"),pushButton.disabled=!0):(console.log("Unable to subscribe to push.",n),pushButton.disabled=!1,pushButton.textContent="Enable Push Messages")})})}function unsubscribe(){pushButton.disabled=!0,navigator.serviceWorker.ready.then(function(n){n.pushManager.getSubscription().then(function(n){return n?void n.unsubscribe().then(function(){pushButton.disabled=!1,pushButton.textContent="Enable Push Messages",isPushEnabled=!1})["catch"](function(n){console.log("Unsubscription error: ",n),pushButton.disabled=!1}):(isPushEnabled=!1,pushButton.disabled=!1,void(pushButton.textContent="Enable Push Messages"))})["catch"](function(n){console.log("Error thrown while unsubscribing from push messaging.",n)})})}function endpointWorkaround(n){if(0!==n.endpoint.indexOf("https://android.googleapis.com/gcm/send"))return n.endpoint;var e=n.endpoint;return n.subscriptionId&&-1===n.endpoint.indexOf(n.subscriptionId)&&(e=n.endpoint+"/"+n.subscriptionId),e}function sendSubscriptionToServer(n){console.log(n);var e=endpointWorkaround(n);socket.emit("New Subscription",e),console.log("TODO: Implement sendSubscriptionToServer()",e)}var isPushEnabled=!1,pushButton=document.querySelector(".js-push-button"),socket=io.connect("localhost:5000");window.addEventListener("load",function(){pushButton.addEventListener("click",function(){isPushEnabled?unsubscribe():subscribe()}),"serviceWorker"in navigator?navigator.serviceWorker.register("./sw.js").then(initialiseState):console.log("Service workers aren't supported in this browser.")});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOlsiaW5pdGlhbGlzZVN0YXRlIiwid2luZG93IiwiU2VydmljZVdvcmtlclJlZ2lzdHJhdGlvbiIsInByb3RvdHlwZSIsIk5vdGlmaWNhdGlvbiIsInBlcm1pc3Npb24iLCJjb25zb2xlIiwibG9nIiwibmF2aWdhdG9yIiwic2VydmljZVdvcmtlciIsInJlYWR5IiwidGhlbiIsInNlcnZpY2VXb3JrZXJSZWdpc3RyYXRpb24iLCJwdXNoTWFuYWdlciIsImdldFN1YnNjcmlwdGlvbiIsInB1c2hTdWJzY3JpcHRpb24iLCJzZW5kU3Vic2NyaXB0aW9uVG9TZXJ2ZXIiLCJwdXNoQnV0dG9uIiwidGV4dENvbnRlbnQiLCJpc1B1c2hFbmFibGVkIiwiZGlzYWJsZWQiLCJlcnIiLCJzdWJzY3JpYmUiLCJ1c2VyVmlzaWJsZU9ubHkiLCJlIiwidW5zdWJzY3JpYmUiLCJlbmRwb2ludFdvcmthcm91bmQiLCJlbmRwb2ludCIsImluZGV4T2YiLCJtZXJnZWRFbmRwb2ludCIsInN1YnNjcmlwdGlvbklkIiwic29ja2V0IiwiZW1pdCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImlvIiwiY29ubmVjdCIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZWdpc3RlciJdLCJtYXBwaW5ncyI6IkFBQUEsWUFzQkEsU0FBQUEsbUJBRUEsTUFBQSxlQUFBQyxRQUtBLG9CQUFBQywyQkFBQUMsVUFLQSxXQUFBQyxhQUFBQyxlQUNBQyxTQUFBQyxJQUFBLDJDQUtBQyxXQUFBQyxjQUFBQyxNQUFBQyxLQUFBLFNBQUFDLEdBRUFBLEVBQUFDLFlBQUFDLGtCQUFBSCxLQUFBLFNBQUFJLEdBQ0EsTUFBQUEsSUFLQUMseUJBQUFELEdBQ0FFLFdBQUFDLFlBQUEsd0JBQ0FDLGVBQUEsRUFGQUgsU0FKQUMsV0FBQUMsWUFBQSw0QkFDQUQsV0FBQUcsVUFBQSxNQUhBUixTQVVBLFNBQUFTLEdBQ0FmLFFBQUFDLElBQUEsaUNBQUFjLFdBdkJBZixTQUFBQyxJQUFBLHVDQUxBRCxTQUFBQyxJQUFBLG1DQWlDQSxRQUFBZSxhQUdBTCxXQUFBRyxVQUFBLEVBRUFaLFVBQUFDLGNBQUFDLE1BQUFDLEtBQUEsU0FBQUMsR0FDQUEsRUFBQUMsWUFBQVMsV0FBQUMsaUJBQUEsSUFBQVosS0FBQSxTQUFBSSxHQUtBLE1BSEFJLGdCQUFBLEVBQ0FGLFdBQUFDLFlBQUEsd0JBQ0FELFdBQUFHLFVBQUEsRUFDQUoseUJBQUFELEtBTEFILFNBTUEsU0FBQVksR0FDQSxXQUFBcEIsYUFBQUMsWUFDQUMsUUFBQUMsSUFBQSwyQ0FDQVUsV0FBQUcsVUFBQSxJQUVBZCxRQUFBQyxJQUFBLCtCQUFBaUIsR0FDQVAsV0FBQUcsVUFBQSxFQUNBSCxXQUFBQyxZQUFBLDRCQU1BLFFBQUFPLGVBQ0FSLFdBQUFHLFVBQUEsRUFFQVosVUFBQUMsY0FBQUMsTUFBQUMsS0FBQSxTQUFBQyxHQUdBQSxFQUFBQyxZQUFBQyxrQkFBQUgsS0FBQSxTQUFBSSxHQUVBLE1BQUFBLE9BY0FBLEdBQUFVLGNBQUFkLEtBQUEsV0FDQU0sV0FBQUcsVUFBQSxFQUNBSCxXQUFBQyxZQUFBLHVCQUNBQyxlQUFBLElBSEFKLFNBSUEsU0FBQVMsR0FDQWxCLFFBQUFDLElBQUEseUJBQUFpQixHQUNBUCxXQUFBRyxVQUFBLEtBakJBRCxlQUFBLEVBQ0FGLFdBQUFHLFVBQUEsT0FDQUgsV0FBQUMsWUFBQSwyQkFQQU4sU0F3QkEsU0FBQVksR0FDQWxCLFFBQUFDLElBQUEsd0RBQUFpQixPQVFBLFFBQUFFLG9CQUFBWCxHQUVBLEdBQUEsSUFBQUEsRUFBQVksU0FBQUMsUUFBQSwyQ0FDQSxNQUFBYixHQUFBWSxRQUdBLElBQUFFLEdBQUFkLEVBQUFZLFFBT0EsT0FKQVosR0FBQWUsZ0JBQUEsS0FBQWYsRUFBQVksU0FBQUMsUUFBQWIsRUFBQWUsa0JBRUFELEVBQUFkLEVBQUFZLFNBQUEsSUFBQVosRUFBQWUsZ0JBRUFELEVBR0EsUUFBQWIsMEJBQUFELEdBSUFULFFBQUFDLElBQUFRLEVBQ0EsSUFBQWMsR0FBQUgsbUJBQUFYLEVBQ0FnQixRQUFBQyxLQUFBLG1CQUFBSCxHQUNBdkIsUUFBQUMsSUFBQSw2Q0FBQXNCLEdBL0lBLEdBQUFWLGdCQUFBLEVBQ0FGLFdBQUFnQixTQUFBQyxjQUFBLG1CQUNBSCxPQUFBSSxHQUFBQyxRQUFBLGlCQUVBbkMsUUFBQW9DLGlCQUFBLE9BQUEsV0FDQXBCLFdBQUFvQixpQkFBQSxRQUFBLFdBQ0FsQixjQUNBTSxjQUVBSCxjQUlBLGlCQUFBZCxXQUNBQSxVQUFBQyxjQUFBNkIsU0FBQSxXQUFBM0IsS0FBQVgsaUJBRUFNLFFBQUFDLElBQUEiLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXNQdXNoRW5hYmxlZCA9IGZhbHNlO1xudmFyIHB1c2hCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtcHVzaC1idXR0b24nKTtcbnZhciBzb2NrZXQgPSBpby5jb25uZWN0KCdsb2NhbGhvc3Q6NTAwMCcpO1xuXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGZ1bmN0aW9uICgpIHtcbiAgcHVzaEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoaXNQdXNoRW5hYmxlZCkge1xuICAgICAgdW5zdWJzY3JpYmUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3Vic2NyaWJlKCk7XG4gICAgfVxuICB9KTtcblxuICBpZiAoJ3NlcnZpY2VXb3JrZXInIGluIG5hdmlnYXRvcikge1xuICAgIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLnJlZ2lzdGVyKCcuL3N3LmpzJykudGhlbihpbml0aWFsaXNlU3RhdGUpO1xuICB9IGVsc2Uge1xuICAgIGNvbnNvbGUubG9nKCdTZXJ2aWNlIHdvcmtlcnMgYXJlblxcJ3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3Nlci4nKTtcbiAgfVxufSk7XG5cbmZ1bmN0aW9uIGluaXRpYWxpc2VTdGF0ZSgpIHtcbiAgLy8gQ2hlY2sgaWYgcHVzaCBtZXNzYWdpbmcgaXMgc3VwcG9ydGVkIGJ5IHRoZSBicm93c2VyXG4gIGlmICghKCdQdXNoTWFuYWdlcicgaW4gd2luZG93KSkge1xuICAgIGNvbnNvbGUubG9nKCdQdXNoIG1lc3NhZ2luZyBpc25cXCd0IHN1cHBvcnRlZC4nKTtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gQ2hlY2sgaWYgbm90aWZpY2F0aW9ucyBhcmUgc3VwcG9ydGVkIGluIHRoZSBzZXJ2aWNlIHdvcmtlclxuICBpZiAoISgnc2hvd05vdGlmaWNhdGlvbicgaW4gU2VydmljZVdvcmtlclJlZ2lzdHJhdGlvbi5wcm90b3R5cGUpKSB7XG4gICAgY29uc29sZS5sb2coJ05vdGlmaWNhdGlvbnMgYXJlblxcJ3Qgc3VwcG9ydGVkLicpO1xuICAgIHJldHVybjtcbiAgfVxuICAvLyBDaGVjayBpZiBmb3IgcHVzaCBub3RpZmljYXRpb25zIHBlcm1pc3Npb24gaGF2ZSBiZWVuIGRlbmllZFxuICBpZiAoTm90aWZpY2F0aW9uLnBlcm1pc3Npb24gPT09ICdkZW5pZWQnKSB7XG4gICAgY29uc29sZS5sb2coJ1RoZSB1c2VyIGhhcyBibG9ja2VkIG5vdGlmaWNhdGlvbnMuJyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gV2UgbmVlZCB0aGUgc2VydmljZSB3b3JrZXIgcmVnaXN0cmF0aW9uIHRvIGNoZWNrIGZvciBhIHN1YnNjcmlwdGlvblxuICBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5yZWFkeS50aGVuKGZ1bmN0aW9uIChzZXJ2aWNlV29ya2VyUmVnaXN0cmF0aW9uKSB7XG4gICAgLy8gQ2hlY2sgZm9yIGV4aXN0aW5nIHB1c2ggbm90aWZpY2F0aW9uIHBlcm1pc3Npb25zXG4gICAgc2VydmljZVdvcmtlclJlZ2lzdHJhdGlvbi5wdXNoTWFuYWdlci5nZXRTdWJzY3JpcHRpb24oKS50aGVuKGZ1bmN0aW9uIChwdXNoU3Vic2NyaXB0aW9uKSB7XG4gICAgICBpZiAoIXB1c2hTdWJzY3JpcHRpb24pIHtcbiAgICAgICAgcHVzaEJ1dHRvbi50ZXh0Q29udGVudCA9ICdFbmFibGUgUHVzaCBNZXNzYWdlcyc7XG4gICAgICAgIHB1c2hCdXR0b24uZGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2VuZFN1YnNjcmlwdGlvblRvU2VydmVyKHB1c2hTdWJzY3JpcHRpb24pO1xuICAgICAgICBwdXNoQnV0dG9uLnRleHRDb250ZW50ID0gJ0Rpc2FibGUgUHVzaCBNZXNzYWdlcyc7XG4gICAgICAgIGlzUHVzaEVuYWJsZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdFcnJvciBkdXJpbmcgZ2V0U3Vic2NyaXB0aW9uKCknLCBlcnIpO1xuICAgIH0pO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gc3Vic2NyaWJlKCkge1xuICAvLyBEaXNhYmxlIHRoZSBidXR0b24gc28gaXQgY2FuJ3QgYmUgY2hhbmdlZCB3aGlsZVxuICAvLyBwdXNoIHBlcm1pc3Npb25zIGFyZSBwcm9jZXNzZWRcbiAgcHVzaEJ1dHRvbi5kaXNhYmxlZCA9IHRydWU7XG5cbiAgbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIucmVhZHkudGhlbihmdW5jdGlvbiAoc2VydmljZVdvcmtlclJlZ2lzdHJhdGlvbikge1xuICAgIHNlcnZpY2VXb3JrZXJSZWdpc3RyYXRpb24ucHVzaE1hbmFnZXIuc3Vic2NyaWJlKHsgdXNlclZpc2libGVPbmx5OiB0cnVlIH0pLnRoZW4oZnVuY3Rpb24gKHB1c2hTdWJzY3JpcHRpb24pIHtcbiAgICAgIC8vIFRoZSBzdWJzY3JpcHRpb24gd2FzIHN1Y2Nlc3NmdWxcbiAgICAgIGlzUHVzaEVuYWJsZWQgPSB0cnVlO1xuICAgICAgcHVzaEJ1dHRvbi50ZXh0Q29udGVudCA9ICdEaXNhYmxlIFB1c2ggTWVzc2FnZXMnO1xuICAgICAgcHVzaEJ1dHRvbi5kaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgcmV0dXJuIHNlbmRTdWJzY3JpcHRpb25Ub1NlcnZlcihwdXNoU3Vic2NyaXB0aW9uKTtcbiAgICB9KS5jYXRjaChmdW5jdGlvbiAoZSkge1xuICAgICAgaWYgKE5vdGlmaWNhdGlvbi5wZXJtaXNzaW9uID09PSAnZGVuaWVkJykge1xuICAgICAgICBjb25zb2xlLmxvZygnUGVybWlzc2lvbiBmb3IgTm90aWZpY2F0aW9ucyB3YXMgZGVuaWVkJyk7XG4gICAgICAgIHB1c2hCdXR0b24uZGlzYWJsZWQgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5sb2coJ1VuYWJsZSB0byBzdWJzY3JpYmUgdG8gcHVzaC4nLCBlKTtcbiAgICAgICAgcHVzaEJ1dHRvbi5kaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgICBwdXNoQnV0dG9uLnRleHRDb250ZW50ID0gJ0VuYWJsZSBQdXNoIE1lc3NhZ2VzJztcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICBwdXNoQnV0dG9uLmRpc2FibGVkID0gdHJ1ZTtcblxuICBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5yZWFkeS50aGVuKGZ1bmN0aW9uIChzZXJ2aWNlV29ya2VyUmVnaXN0cmF0aW9uKSB7XG4gICAgLy8gVG8gdW5zdWJzY3JpYmUgZnJvbSBwdXNoIG1lc3NhZ2luZywgeW91IG5lZWQgZ2V0IHRoZVxuICAgIC8vIHN1YmNyaXB0aW9uIG9iamVjdCwgd2hpY2ggeW91IGNhbiBjYWxsIHVuc3Vic2NyaWJlKCkgb24uXG4gICAgc2VydmljZVdvcmtlclJlZ2lzdHJhdGlvbi5wdXNoTWFuYWdlci5nZXRTdWJzY3JpcHRpb24oKS50aGVuKGZ1bmN0aW9uIChwdXNoU3Vic2NyaXB0aW9uKSB7XG4gICAgICAvLyBDaGVjayB3ZSBoYXZlIGEgc3Vic2NyaXB0aW9uIHRvIHVuc3Vic2NyaWJlXG4gICAgICBpZiAoIXB1c2hTdWJzY3JpcHRpb24pIHtcbiAgICAgICAgLy8gTm8gc3Vic2NyaXB0aW9uIG9iamVjdCwgc28gc2V0IHRoZSBzdGF0ZVxuICAgICAgICAvLyB0byBhbGxvdyB0aGUgdXNlciB0byBzdWJzY3JpYmUgdG8gcHVzaFxuICAgICAgICBpc1B1c2hFbmFibGVkID0gZmFsc2U7XG4gICAgICAgIHB1c2hCdXR0b24uZGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgcHVzaEJ1dHRvbi50ZXh0Q29udGVudCA9ICdFbmFibGUgUHVzaCBNZXNzYWdlcyc7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gVE9ETzogTWFrZSBhIHJlcXVlc3QgdG8geW91ciBzZXJ2ZXIgdG8gcmVtb3ZlXG4gICAgICAvLyB0aGUgdXNlcnMgZGF0YSBmcm9tIHlvdXIgZGF0YSBzdG9yZSBzbyB5b3VcbiAgICAgIC8vIGRvbid0IGF0dGVtcHQgdG8gc2VuZCB0aGVtIHB1c2ggbWVzc2FnZXMgYW55bW9yZVxuXG4gICAgICAvLyBXZSBoYXZlIGEgc3ViY3JpcHRpb24sIHNvIGNhbGwgdW5zdWJzY3JpYmUgb24gaXRcbiAgICAgIHB1c2hTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcHVzaEJ1dHRvbi5kaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgICBwdXNoQnV0dG9uLnRleHRDb250ZW50ID0gJ0VuYWJsZSBQdXNoIE1lc3NhZ2VzJztcbiAgICAgICAgaXNQdXNoRW5hYmxlZCA9IGZhbHNlO1xuICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ1Vuc3Vic2NyaXB0aW9uIGVycm9yOiAnLCBlKTtcbiAgICAgICAgcHVzaEJ1dHRvbi5kaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgfSk7XG4gICAgfSkuY2F0Y2goZnVuY3Rpb24gKGUpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdFcnJvciB0aHJvd24gd2hpbGUgdW5zdWJzY3JpYmluZyBmcm9tICcgKyAncHVzaCBtZXNzYWdpbmcuJywgZSk7XG4gICAgfSk7XG4gIH0pO1xufVxuXG4vLyBUaGlzIG1ldGhvZCBoYW5kbGVzIHRoZSByZW1vdmFsIG9mIHN1YnNjcmlwdGlvbklkXG4vLyBpbiBDaHJvbWUgNDQgYnkgY29uY2F0ZW5hdGluZyB0aGUgc3Vic2NyaXB0aW9uIElkXG4vLyB0byB0aGUgc3Vic2NyaXB0aW9uIGVuZHBvaW50XG5mdW5jdGlvbiBlbmRwb2ludFdvcmthcm91bmQocHVzaFN1YnNjcmlwdGlvbikge1xuICAvLyBNYWtlIHN1cmUgd2Ugb25seSBtZXNzIHdpdGggR0NNXG4gIGlmIChwdXNoU3Vic2NyaXB0aW9uLmVuZHBvaW50LmluZGV4T2YoJ2h0dHBzOi8vYW5kcm9pZC5nb29nbGVhcGlzLmNvbS9nY20vc2VuZCcpICE9PSAwKSB7XG4gICAgcmV0dXJuIHB1c2hTdWJzY3JpcHRpb24uZW5kcG9pbnQ7XG4gIH1cblxuICB2YXIgbWVyZ2VkRW5kcG9pbnQgPSBwdXNoU3Vic2NyaXB0aW9uLmVuZHBvaW50O1xuICAvLyBDaHJvbWUgNDIgKyA0MyB3aWxsIG5vdCBoYXZlIHRoZSBzdWJzY3JpcHRpb25JZCBhdHRhY2hlZFxuICAvLyB0byB0aGUgZW5kcG9pbnQuXG4gIGlmIChwdXNoU3Vic2NyaXB0aW9uLnN1YnNjcmlwdGlvbklkICYmIHB1c2hTdWJzY3JpcHRpb24uZW5kcG9pbnQuaW5kZXhPZihwdXNoU3Vic2NyaXB0aW9uLnN1YnNjcmlwdGlvbklkKSA9PT0gLTEpIHtcbiAgICAvLyBIYW5kbGUgdmVyc2lvbiA0MiB3aGVyZSB5b3UgaGF2ZSBzZXBhcmF0ZSBzdWJJZCBhbmQgRW5kcG9pbnRcbiAgICBtZXJnZWRFbmRwb2ludCA9IHB1c2hTdWJzY3JpcHRpb24uZW5kcG9pbnQgKyAnLycgKyBwdXNoU3Vic2NyaXB0aW9uLnN1YnNjcmlwdGlvbklkO1xuICB9XG4gIHJldHVybiBtZXJnZWRFbmRwb2ludDtcbn1cblxuZnVuY3Rpb24gc2VuZFN1YnNjcmlwdGlvblRvU2VydmVyKHB1c2hTdWJzY3JpcHRpb24pIHtcbiAgLy8gVE9ETzogU2VuZCB0aGUgc3Vic2NyaXB0aW9uLmVuZHBvaW50XG4gIC8vIHRvIHlvdXIgc2VydmVyIGFuZCBzYXZlIGl0IHRvIHNlbmQgYVxuICAvLyBwdXNoIG1lc3NhZ2UgYXQgYSBsYXRlciBkYXRlXG4gIGNvbnNvbGUubG9nKHB1c2hTdWJzY3JpcHRpb24pO1xuICB2YXIgbWVyZ2VkRW5kcG9pbnQgPSBlbmRwb2ludFdvcmthcm91bmQocHVzaFN1YnNjcmlwdGlvbik7XG4gIHNvY2tldC5lbWl0KCdOZXcgU3Vic2NyaXB0aW9uJywgbWVyZ2VkRW5kcG9pbnQpO1xuICBjb25zb2xlLmxvZygnVE9ETzogSW1wbGVtZW50IHNlbmRTdWJzY3JpcHRpb25Ub1NlcnZlcigpJywgbWVyZ2VkRW5kcG9pbnQpO1xufSJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
