"use strict";function initialiseState(){return"PushManager"in window?"showNotification"in ServiceWorkerRegistration.prototype?"denied"===Notification.permission?void console.log("The user has blocked notifications."):void navigator.serviceWorker.ready.then(function(i){i.pushManager.getSubscription().then(function(i){return i?(sendSubscriptionToServer(i),pushNotificationToggle.textContent="Disable Push Messages",pushNotificationEnabled=!0,void 0):(pushNotificationToggle.textContent="Enable Push Messages",void(pushNotificationToggle.disabled=!1))})["catch"](function(i){console.log("Error during getSubscription()",i)})}):void console.log("Notifications aren't supported."):void console.log("Push messaging isn't supported.")}function subscribe(){pushNotificationToggle.disabled=!0,navigator.serviceWorker.ready.then(function(i){i.pushManager.subscribe({userVisibleOnly:!0}).then(function(i){return pushNotificationEnabled=!0,pushNotificationToggle.textContent="Disable Push Messages",pushNotificationToggle.disabled=!1,sendSubscriptionToServer(i)})["catch"](function(i){"denied"===Notification.permission?(console.log("Permission for Notifications was denied"),pushNotificationToggle.disabled=!0,pushNotificationToggle.textContent=""):(console.log("Unable to subscribe to push.",i),pushNotificationToggle.disabled=!1,pushNotificationToggle.textContent="Enable Push Messages")})})}function unsubscribe(){pushNotificationToggle.disabled=!0,navigator.serviceWorker.ready.then(function(i){i.pushManager.getSubscription().then(function(i){return i?(removeSubscriptionFromServer(i),void i.unsubscribe().then(function(){pushNotificationToggle.disabled=!1,pushNotificationToggle.textContent="Enable Push Messages",pushNotificationEnabled=!1})["catch"](function(i){console.log("Unsubscription error: ",i),pushNotificationToggle.disabled=!1})):(pushNotificationEnabled=!1,pushNotificationToggle.disabled=!1,void(pushNotificationToggle.textContent="Enable Push Messages"))})["catch"](function(i){console.log("Error thrown while unsubscribing from push messaging.",i)})})}function sendSubscriptionToServer(i){var o=endpointWorkaround(i);console.log(o)}function removeSubscriptionFromServer(i){var o=endpointWorkaround(i);console.log(o)}function endpointWorkaround(i){if(0!==i.endpoint.indexOf("https://android.googleapis.com/gcm/send"))return i.endpoint;var o=i.endpoint;return i.subscriptionId&&-1===i.endpoint.indexOf(i.subscriptionId)&&(o=i.endpoint+"/"+i.subscriptionId),o}var pushNotificationEnabled=!1,pushNotificationToggle=document.querySelector(".js-push-button");pushNotificationToggle.addEventListener("click",function(){pushNotificationEnabled?unsubscribe():subscribe()}),"serviceWorker"in navigator&&navigator.serviceWorker.register("./sw.js").then(initialiseState);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOlsiaW5pdGlhbGlzZVN0YXRlIiwid2luZG93IiwiU2VydmljZVdvcmtlclJlZ2lzdHJhdGlvbiIsInByb3RvdHlwZSIsIk5vdGlmaWNhdGlvbiIsInBlcm1pc3Npb24iLCJjb25zb2xlIiwibG9nIiwibmF2aWdhdG9yIiwic2VydmljZVdvcmtlciIsInJlYWR5IiwidGhlbiIsInNlcnZpY2VXb3JrZXJSZWdpc3RyYXRpb24iLCJwdXNoTWFuYWdlciIsImdldFN1YnNjcmlwdGlvbiIsInB1c2hTdWJzY3JpcHRpb24iLCJzZW5kU3Vic2NyaXB0aW9uVG9TZXJ2ZXIiLCJwdXNoTm90aWZpY2F0aW9uVG9nZ2xlIiwidGV4dENvbnRlbnQiLCJwdXNoTm90aWZpY2F0aW9uRW5hYmxlZCIsImRpc2FibGVkIiwiZXJyIiwic3Vic2NyaWJlIiwidXNlclZpc2libGVPbmx5IiwiZSIsInVuc3Vic2NyaWJlIiwicmVtb3ZlU3Vic2NyaXB0aW9uRnJvbVNlcnZlciIsIm1lcmdlZEVuZHBvaW50IiwiZW5kcG9pbnRXb3JrYXJvdW5kIiwiZW5kcG9pbnQiLCJpbmRleE9mIiwic3Vic2NyaXB0aW9uSWQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJhZGRFdmVudExpc3RlbmVyIiwicmVnaXN0ZXIiXSwibWFwcGluZ3MiOiJBQUFBLFlBV0EsU0FBQUEsbUJBRUEsTUFBQSxlQUFBQyxRQUtBLG9CQUFBQywyQkFBQUMsVUFLQSxXQUFBQyxhQUFBQyxlQUNBQyxTQUFBQyxJQUFBLDJDQUtBQyxXQUFBQyxjQUFBQyxNQUFBQyxLQUFBLFNBQUFDLEdBRUFBLEVBQUFDLFlBQUFDLGtCQUFBSCxLQUFBLFNBQUFJLEdBQ0EsTUFBQUEsSUFLQUMseUJBQUFELEdBQ0FFLHVCQUFBQyxZQUFBLHdCQUNBQyx5QkFBQSxFQUZBSCxTQUpBQyx1QkFBQUMsWUFBQSw0QkFDQUQsdUJBQUFHLFVBQUEsTUFIQVIsU0FVQSxTQUFBUyxHQUNBZixRQUFBQyxJQUFBLGlDQUFBYyxXQXZCQWYsU0FBQUMsSUFBQSx1Q0FMQUQsU0FBQUMsSUFBQSxtQ0FpQ0EsUUFBQWUsYUFHQUwsdUJBQUFHLFVBQUEsRUFFQVosVUFBQUMsY0FBQUMsTUFBQUMsS0FBQSxTQUFBQyxHQUNBQSxFQUFBQyxZQUFBUyxXQUFBQyxpQkFBQSxJQUFBWixLQUFBLFNBQUFJLEdBS0EsTUFIQUksMEJBQUEsRUFDQUYsdUJBQUFDLFlBQUEsd0JBQ0FELHVCQUFBRyxVQUFBLEVBQ0FKLHlCQUFBRCxLQUxBSCxTQU1BLFNBQUFZLEdBQ0EsV0FBQXBCLGFBQUFDLFlBQ0FDLFFBQUFDLElBQUEsMkNBQ0FVLHVCQUFBRyxVQUFBLEVBQ0FILHVCQUFBQyxZQUFBLEtBRUFaLFFBQUFDLElBQUEsK0JBQUFpQixHQUNBUCx1QkFBQUcsVUFBQSxFQUNBSCx1QkFBQUMsWUFBQSw0QkFNQSxRQUFBTyxlQUdBUix1QkFBQUcsVUFBQSxFQUVBWixVQUFBQyxjQUFBQyxNQUFBQyxLQUFBLFNBQUFDLEdBQ0FBLEVBQUFDLFlBQUFDLGtCQUFBSCxLQUFBLFNBQUFJLEdBRUEsTUFBQUEsSUFTQVcsNkJBQUFYLE9BR0FBLEdBQUFVLGNBQUFkLEtBQUEsV0FDQU0sdUJBQUFHLFVBQUEsRUFDQUgsdUJBQUFDLFlBQUEsdUJBQ0FDLHlCQUFBLElBSEFKLFNBSUEsU0FBQVMsR0FDQWxCLFFBQUFDLElBQUEseUJBQUFpQixHQUNBUCx1QkFBQUcsVUFBQSxNQWZBRCx5QkFBQSxFQUNBRix1QkFBQUcsVUFBQSxPQUNBSCx1QkFBQUMsWUFBQSwyQkFQQU4sU0FzQkEsU0FBQVksR0FDQWxCLFFBQUFDLElBQUEsd0RBQUFpQixPQUtBLFFBQUFSLDBCQUFBRCxHQUNBLEdBQUFZLEdBQUFDLG1CQUFBYixFQUNBVCxTQUFBQyxJQUFBb0IsR0FHQSxRQUFBRCw4QkFBQVgsR0FDQSxHQUFBWSxHQUFBQyxtQkFBQWIsRUFDQVQsU0FBQUMsSUFBQW9CLEdBTUEsUUFBQUMsb0JBQUFiLEdBRUEsR0FBQSxJQUFBQSxFQUFBYyxTQUFBQyxRQUFBLDJDQUNBLE1BQUFmLEdBQUFjLFFBR0EsSUFBQUYsR0FBQVosRUFBQWMsUUFPQSxPQUpBZCxHQUFBZ0IsZ0JBQUEsS0FBQWhCLEVBQUFjLFNBQUFDLFFBQUFmLEVBQUFnQixrQkFFQUosRUFBQVosRUFBQWMsU0FBQSxJQUFBZCxFQUFBZ0IsZ0JBRUFKLEVBbklBLEdBQUFSLDBCQUFBLEVBQ0FGLHVCQUFBZSxTQUFBQyxjQUFBLGtCQUVBaEIsd0JBQUFpQixpQkFBQSxRQUFBLFdBQ0FmLHdCQUFBTSxjQUFBSCxjQUdBLGlCQUFBZCxZQUFBQSxVQUFBQyxjQUFBMEIsU0FBQSxXQUFBeEIsS0FBQVgiLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcHVzaE5vdGlmaWNhdGlvbkVuYWJsZWQgPSBmYWxzZTtcbnZhciBwdXNoTm90aWZpY2F0aW9uVG9nZ2xlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLXB1c2gtYnV0dG9uJyk7XG5cbnB1c2hOb3RpZmljYXRpb25Ub2dnbGUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gIGlmIChwdXNoTm90aWZpY2F0aW9uRW5hYmxlZCkgdW5zdWJzY3JpYmUoKTtlbHNlIHN1YnNjcmliZSgpO1xufSk7XG5cbmlmICgnc2VydmljZVdvcmtlcicgaW4gbmF2aWdhdG9yKSBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5yZWdpc3RlcignLi9zdy5qcycpLnRoZW4oaW5pdGlhbGlzZVN0YXRlKTtcblxuZnVuY3Rpb24gaW5pdGlhbGlzZVN0YXRlKCkge1xuICAvLyBDaGVjayBpZiBwdXNoIG1lc3NhZ2luZyBpcyBzdXBwb3J0ZWQgYnkgdGhlIGJyb3dzZXJcbiAgaWYgKCEoJ1B1c2hNYW5hZ2VyJyBpbiB3aW5kb3cpKSB7XG4gICAgY29uc29sZS5sb2coJ1B1c2ggbWVzc2FnaW5nIGlzblxcJ3Qgc3VwcG9ydGVkLicpO1xuICAgIHJldHVybjtcbiAgfVxuICAvLyBDaGVjayBpZiBub3RpZmljYXRpb25zIGFyZSBzdXBwb3J0ZWQgaW4gdGhlIHNlcnZpY2Ugd29ya2VyXG4gIGlmICghKCdzaG93Tm90aWZpY2F0aW9uJyBpbiBTZXJ2aWNlV29ya2VyUmVnaXN0cmF0aW9uLnByb3RvdHlwZSkpIHtcbiAgICBjb25zb2xlLmxvZygnTm90aWZpY2F0aW9ucyBhcmVuXFwndCBzdXBwb3J0ZWQuJyk7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8vIENoZWNrIGlmIGZvciBwdXNoIG5vdGlmaWNhdGlvbnMgcGVybWlzc2lvbiBoYXZlIGJlZW4gZGVuaWVkXG4gIGlmIChOb3RpZmljYXRpb24ucGVybWlzc2lvbiA9PT0gJ2RlbmllZCcpIHtcbiAgICBjb25zb2xlLmxvZygnVGhlIHVzZXIgaGFzIGJsb2NrZWQgbm90aWZpY2F0aW9ucy4nKTtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBXZSBuZWVkIHRoZSBzZXJ2aWNlIHdvcmtlciByZWdpc3RyYXRpb24gdG8gY2hlY2sgZm9yIGEgc3Vic2NyaXB0aW9uXG4gIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLnJlYWR5LnRoZW4oZnVuY3Rpb24gKHNlcnZpY2VXb3JrZXJSZWdpc3RyYXRpb24pIHtcbiAgICAvLyBDaGVjayBmb3IgZXhpc3RpbmcgcHVzaCBub3RpZmljYXRpb24gcGVybWlzc2lvbnNcbiAgICBzZXJ2aWNlV29ya2VyUmVnaXN0cmF0aW9uLnB1c2hNYW5hZ2VyLmdldFN1YnNjcmlwdGlvbigpLnRoZW4oZnVuY3Rpb24gKHB1c2hTdWJzY3JpcHRpb24pIHtcbiAgICAgIGlmICghcHVzaFN1YnNjcmlwdGlvbikge1xuICAgICAgICBwdXNoTm90aWZpY2F0aW9uVG9nZ2xlLnRleHRDb250ZW50ID0gJ0VuYWJsZSBQdXNoIE1lc3NhZ2VzJztcbiAgICAgICAgcHVzaE5vdGlmaWNhdGlvblRvZ2dsZS5kaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZW5kU3Vic2NyaXB0aW9uVG9TZXJ2ZXIocHVzaFN1YnNjcmlwdGlvbik7XG4gICAgICAgIHB1c2hOb3RpZmljYXRpb25Ub2dnbGUudGV4dENvbnRlbnQgPSAnRGlzYWJsZSBQdXNoIE1lc3NhZ2VzJztcbiAgICAgICAgcHVzaE5vdGlmaWNhdGlvbkVuYWJsZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdFcnJvciBkdXJpbmcgZ2V0U3Vic2NyaXB0aW9uKCknLCBlcnIpO1xuICAgIH0pO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gc3Vic2NyaWJlKCkge1xuICAvLyBEaXNhYmxlIHRoZSBidXR0b24gc28gaXQgY2FuJ3QgYmUgY2hhbmdlZCB3aGlsZVxuICAvLyBwdXNoIHBlcm1pc3Npb25zIGFyZSBwcm9jZXNzZWRcbiAgcHVzaE5vdGlmaWNhdGlvblRvZ2dsZS5kaXNhYmxlZCA9IHRydWU7XG5cbiAgbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIucmVhZHkudGhlbihmdW5jdGlvbiAoc2VydmljZVdvcmtlclJlZ2lzdHJhdGlvbikge1xuICAgIHNlcnZpY2VXb3JrZXJSZWdpc3RyYXRpb24ucHVzaE1hbmFnZXIuc3Vic2NyaWJlKHsgdXNlclZpc2libGVPbmx5OiB0cnVlIH0pLnRoZW4oZnVuY3Rpb24gKHB1c2hTdWJzY3JpcHRpb24pIHtcbiAgICAgIC8vIFRoZSBzdWJzY3JpcHRpb24gd2FzIHN1Y2Nlc3NmdWxcbiAgICAgIHB1c2hOb3RpZmljYXRpb25FbmFibGVkID0gdHJ1ZTtcbiAgICAgIHB1c2hOb3RpZmljYXRpb25Ub2dnbGUudGV4dENvbnRlbnQgPSAnRGlzYWJsZSBQdXNoIE1lc3NhZ2VzJztcbiAgICAgIHB1c2hOb3RpZmljYXRpb25Ub2dnbGUuZGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgIHJldHVybiBzZW5kU3Vic2NyaXB0aW9uVG9TZXJ2ZXIocHVzaFN1YnNjcmlwdGlvbik7XG4gICAgfSkuY2F0Y2goZnVuY3Rpb24gKGUpIHtcbiAgICAgIGlmIChOb3RpZmljYXRpb24ucGVybWlzc2lvbiA9PT0gJ2RlbmllZCcpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ1Blcm1pc3Npb24gZm9yIE5vdGlmaWNhdGlvbnMgd2FzIGRlbmllZCcpO1xuICAgICAgICBwdXNoTm90aWZpY2F0aW9uVG9nZ2xlLmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgcHVzaE5vdGlmaWNhdGlvblRvZ2dsZS50ZXh0Q29udGVudCA9ICcnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5sb2coJ1VuYWJsZSB0byBzdWJzY3JpYmUgdG8gcHVzaC4nLCBlKTtcbiAgICAgICAgcHVzaE5vdGlmaWNhdGlvblRvZ2dsZS5kaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgICBwdXNoTm90aWZpY2F0aW9uVG9nZ2xlLnRleHRDb250ZW50ID0gJ0VuYWJsZSBQdXNoIE1lc3NhZ2VzJztcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAvLyBEaXNhYmxlIHRoZSBidXR0b24gc28gaXQgY2FuJ3QgYmUgY2hhbmdlZCB3aGlsZVxuICAvLyBwdXNoIHBlcm1pc3Npb25zIGFyZSBwcm9jZXNzZWRcbiAgcHVzaE5vdGlmaWNhdGlvblRvZ2dsZS5kaXNhYmxlZCA9IHRydWU7XG5cbiAgbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIucmVhZHkudGhlbihmdW5jdGlvbiAoc2VydmljZVdvcmtlclJlZ2lzdHJhdGlvbikge1xuICAgIHNlcnZpY2VXb3JrZXJSZWdpc3RyYXRpb24ucHVzaE1hbmFnZXIuZ2V0U3Vic2NyaXB0aW9uKCkudGhlbihmdW5jdGlvbiAocHVzaFN1YnNjcmlwdGlvbikge1xuICAgICAgLy8gQ2hlY2sgd2UgaGF2ZSBhIHN1YnNjcmlwdGlvbiB0byB1bnN1YnNjcmliZVxuICAgICAgaWYgKCFwdXNoU3Vic2NyaXB0aW9uKSB7XG4gICAgICAgIC8vIE5vIHN1YnNjcmlwdGlvbiBvYmplY3RcbiAgICAgICAgLy8gQWxsb3cgdXNlciB0byBlbmFibGUgcHVzaCBub3RpZmljYXRpb25zXG4gICAgICAgIHB1c2hOb3RpZmljYXRpb25FbmFibGVkID0gZmFsc2U7XG4gICAgICAgIHB1c2hOb3RpZmljYXRpb25Ub2dnbGUuZGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgcHVzaE5vdGlmaWNhdGlvblRvZ2dsZS50ZXh0Q29udGVudCA9ICdFbmFibGUgUHVzaCBNZXNzYWdlcyc7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcmVtb3ZlU3Vic2NyaXB0aW9uRnJvbVNlcnZlcihwdXNoU3Vic2NyaXB0aW9uKTtcblxuICAgICAgLy8gV2UgaGF2ZSBhIHN1YmNyaXB0aW9uLCBzbyBjYWxsIHVuc3Vic2NyaWJlIG9uIGl0XG4gICAgICBwdXNoU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgIHB1c2hOb3RpZmljYXRpb25Ub2dnbGUuZGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgcHVzaE5vdGlmaWNhdGlvblRvZ2dsZS50ZXh0Q29udGVudCA9ICdFbmFibGUgUHVzaCBNZXNzYWdlcyc7XG4gICAgICAgIHB1c2hOb3RpZmljYXRpb25FbmFibGVkID0gZmFsc2U7XG4gICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZSkge1xuICAgICAgICBjb25zb2xlLmxvZygnVW5zdWJzY3JpcHRpb24gZXJyb3I6ICcsIGUpO1xuICAgICAgICBwdXNoTm90aWZpY2F0aW9uVG9nZ2xlLmRpc2FibGVkID0gZmFsc2U7XG4gICAgICB9KTtcbiAgICB9KS5jYXRjaChmdW5jdGlvbiAoZSkge1xuICAgICAgY29uc29sZS5sb2coJ0Vycm9yIHRocm93biB3aGlsZSB1bnN1YnNjcmliaW5nIGZyb20gJyArICdwdXNoIG1lc3NhZ2luZy4nLCBlKTtcbiAgICB9KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHNlbmRTdWJzY3JpcHRpb25Ub1NlcnZlcihwdXNoU3Vic2NyaXB0aW9uKSB7XG4gIHZhciBtZXJnZWRFbmRwb2ludCA9IGVuZHBvaW50V29ya2Fyb3VuZChwdXNoU3Vic2NyaXB0aW9uKTtcbiAgY29uc29sZS5sb2cobWVyZ2VkRW5kcG9pbnQpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdWJzY3JpcHRpb25Gcm9tU2VydmVyKHB1c2hTdWJzY3JpcHRpb24pIHtcbiAgdmFyIG1lcmdlZEVuZHBvaW50ID0gZW5kcG9pbnRXb3JrYXJvdW5kKHB1c2hTdWJzY3JpcHRpb24pO1xuICBjb25zb2xlLmxvZyhtZXJnZWRFbmRwb2ludCk7XG59XG5cbi8vIFRoaXMgbWV0aG9kIGhhbmRsZXMgdGhlIHJlbW92YWwgb2Ygc3Vic2NyaXB0aW9uSWRcbi8vIGluIENocm9tZSA0NCBieSBjb25jYXRlbmF0aW5nIHRoZSBzdWJzY3JpcHRpb24gSWRcbi8vIHRvIHRoZSBzdWJzY3JpcHRpb24gZW5kcG9pbnRcbmZ1bmN0aW9uIGVuZHBvaW50V29ya2Fyb3VuZChwdXNoU3Vic2NyaXB0aW9uKSB7XG4gIC8vIE1ha2Ugc3VyZSB3ZSBvbmx5IG1lc3Mgd2l0aCBHQ01cbiAgaWYgKHB1c2hTdWJzY3JpcHRpb24uZW5kcG9pbnQuaW5kZXhPZignaHR0cHM6Ly9hbmRyb2lkLmdvb2dsZWFwaXMuY29tL2djbS9zZW5kJykgIT09IDApIHtcbiAgICByZXR1cm4gcHVzaFN1YnNjcmlwdGlvbi5lbmRwb2ludDtcbiAgfVxuXG4gIHZhciBtZXJnZWRFbmRwb2ludCA9IHB1c2hTdWJzY3JpcHRpb24uZW5kcG9pbnQ7XG4gIC8vIENocm9tZSA0MiArIDQzIHdpbGwgbm90IGhhdmUgdGhlIHN1YnNjcmlwdGlvbklkIGF0dGFjaGVkXG4gIC8vIHRvIHRoZSBlbmRwb2ludC5cbiAgaWYgKHB1c2hTdWJzY3JpcHRpb24uc3Vic2NyaXB0aW9uSWQgJiYgcHVzaFN1YnNjcmlwdGlvbi5lbmRwb2ludC5pbmRleE9mKHB1c2hTdWJzY3JpcHRpb24uc3Vic2NyaXB0aW9uSWQpID09PSAtMSkge1xuICAgIC8vIEhhbmRsZSB2ZXJzaW9uIDQyIHdoZXJlIHlvdSBoYXZlIHNlcGFyYXRlIHN1YklkIGFuZCBFbmRwb2ludFxuICAgIG1lcmdlZEVuZHBvaW50ID0gcHVzaFN1YnNjcmlwdGlvbi5lbmRwb2ludCArICcvJyArIHB1c2hTdWJzY3JpcHRpb24uc3Vic2NyaXB0aW9uSWQ7XG4gIH1cbiAgcmV0dXJuIG1lcmdlZEVuZHBvaW50O1xufSJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
