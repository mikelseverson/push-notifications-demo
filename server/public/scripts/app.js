"use strict";function initialiseState(){return"PushManager"in window?"showNotification"in ServiceWorkerRegistration.prototype?"denied"===Notification.permission?void console.log("The user has blocked notifications."):void navigator.serviceWorker.ready.then(function(n){n.pushManager.getSubscription().then(function(n){return n?(sendSubscriptionToServer(n),pushButton.textContent="Disable Push Messages",isPushEnabled=!0,void 0):(pushButton.textContent="Enable Push Messages",void(pushButton.disabled=!1))})["catch"](function(n){console.log("Error during getSubscription()",n)})}):void console.log("Notifications aren't supported."):void console.log("Push messaging isn't supported.")}function subscribe(){pushButton.disabled=!0,navigator.serviceWorker.ready.then(function(n){n.pushManager.subscribe({userVisibleOnly:!0}).then(function(n){return isPushEnabled=!0,pushButton.textContent="Disable Push Messages",pushButton.disabled=!1,sendSubscriptionToServer(n)})["catch"](function(n){"denied"===Notification.permission?(console.log("Permission for Notifications was denied"),pushButton.disabled=!0):(console.log("Unable to subscribe to push.",n),pushButton.disabled=!1,pushButton.textContent="Enable Push Messages")})})}function unsubscribe(){pushButton.disabled=!0,navigator.serviceWorker.ready.then(function(n){n.pushManager.getSubscription().then(function(n){return n?void n.unsubscribe().then(function(){pushButton.disabled=!1,pushButton.textContent="Enable Push Messages",isPushEnabled=!1})["catch"](function(n){console.log("Unsubscription error: ",n),pushButton.disabled=!1}):(isPushEnabled=!1,pushButton.disabled=!1,void(pushButton.textContent="Enable Push Messages"))})["catch"](function(n){console.log("Error thrown while unsubscribing from push messaging.",n)})})}function endpointWorkaround(n){if(0!==n.endpoint.indexOf("https://android.googleapis.com/gcm/send"))return n.endpoint;var e=n.endpoint;return n.subscriptionId&&-1===n.endpoint.indexOf(n.subscriptionId)&&(e=n.endpoint+"/"+n.subscriptionId),e}function sendSubscriptionToServer(n){console.log(n);var e=endpointWorkaround(n);socket.emit("New Subscription",e),console.log("TODO: Implement sendSubscriptionToServer()",e)}var isPushEnabled=!1,pushButton=document.querySelector(".js-push-button"),socket=io.connect("subscribe-notify.herokuapp.com");window.addEventListener("load",function(){pushButton.addEventListener("click",function(){isPushEnabled?unsubscribe():subscribe()}),"serviceWorker"in navigator?navigator.serviceWorker.register("./sw.js").then(initialiseState):console.log("Service workers aren't supported in this browser.")});
//# sourceMappingURL=data:application/json;base64,
